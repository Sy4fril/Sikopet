/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package AdminTools;

/**
 *
 * @author HYPE AMD
 */
public class pnl_konfigSistem extends javax.swing.JPanel {

    /**
     * Creates new form pnl_konfigSistem
     */
    public pnl_konfigSistem() {
        initComponents();
        output.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnBackup = new javax.swing.JButton();
        btnRecover = new javax.swing.JButton();
        btnBroadcast = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputSQL = new javax.swing.JTextArea();
        btnExecuteSQL = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("KONFIGURASI SISTEM");

        btnBackup.setBackground(new java.awt.Color(51, 255, 0));
        btnBackup.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBackup.setText("Backup Database");
        btnBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackupActionPerformed(evt);
            }
        });

        btnRecover.setBackground(new java.awt.Color(51, 204, 255));
        btnRecover.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRecover.setText("Recovery Backup");
        btnRecover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecoverActionPerformed(evt);
            }
        });

        btnBroadcast.setBackground(new java.awt.Color(255, 204, 102));
        btnBroadcast.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBroadcast.setText("Broadcast User");
        btnBroadcast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBroadcastActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(255, 0, 0));
        btnReset.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnReset.setText("Reset Data");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Output");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Masukkan Query SQL");

        inputSQL.setColumns(20);
        inputSQL.setRows(5);
        jScrollPane2.setViewportView(inputSQL);

        btnExecuteSQL.setBackground(new java.awt.Color(102, 0, 102));
        btnExecuteSQL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExecuteSQL.setForeground(new java.awt.Color(255, 255, 255));
        btnExecuteSQL.setText("Execute");
        btnExecuteSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteSQLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(btnBackup, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnRecover, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnBroadcast, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addGap(70, 70, 70))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExecuteSQL)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRecover, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExecuteSQL)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackupActionPerformed
        // Backup database MySQL menggunakan mysqldump dan file chooser
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setDialogTitle("Pilih lokasi untuk menyimpan backup");
        fileChooser.setSelectedFile(new java.io.File("sikopet_backup.sql"));
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File fileToSave = fileChooser.getSelectedFile();
            String dbName = "sikopetdb";
            String dbUser = "root";
            String dbPass = "";
            String command = String.format("mysqldump -u%s %s %s -r \"%s\"", dbUser, dbPass.isEmpty() ? "" : "-p" + dbPass, dbName, fileToSave.getAbsolutePath());
            try {
                ProcessBuilder pb = new ProcessBuilder("mysqldump", "-u" + dbUser, dbPass.isEmpty() ? "" : "-p" + dbPass, dbName, "-r", fileToSave.getAbsolutePath());
                pb.redirectErrorStream(true);
                Process process = pb.start();
                java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()));
                String line;
                StringBuilder outputLog = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    outputLog.append(line).append("\n");
                }
                int exitCode = process.waitFor();
                if (exitCode == 0) {
                    output.append("[SUCCESS] Backup database berhasil: " + fileToSave.getAbsolutePath() + "\n");
                } else {
                    output.append("[ERROR] Backup gagal. Output:\n" + outputLog.toString() + "\n");
                }
            } catch (Exception ex) {
                output.append("[ERROR] Gagal backup database: " + ex.getMessage() + "\n");
            }
        } else {
            output.append("[INFO] Backup dibatalkan oleh user.\n");
        }
    }//GEN-LAST:event_btnBackupActionPerformed

    private void btnRecoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecoverActionPerformed
        // Recovery database MySQL menggunakan mysql dan file chooser
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setDialogTitle("Pilih file backup (.sql) untuk recovery");
        int userSelection = fileChooser.showOpenDialog(this);
        if (userSelection == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File fileToOpen = fileChooser.getSelectedFile();
            String dbName = "sikopetdb";
            String dbUser = "root";
            String dbPass = "";
            try {
                // Perintah: mysql -u root [ -pPASSWORD ] sikopetdb < file.sql
                ProcessBuilder pb = new ProcessBuilder("mysql", "-u" + dbUser, dbPass.isEmpty() ? "" : "-p" + dbPass, dbName, "-e", "source " + fileToOpen.getAbsolutePath());
                pb.redirectErrorStream(true);
                Process process = pb.start();
                java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()));
                String line;
                StringBuilder outputLog = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    outputLog.append(line).append("\n");
                }
                int exitCode = process.waitFor();
                if (exitCode == 0) {
                    output.append("[SUCCESS] Recovery database berhasil dari: " + fileToOpen.getAbsolutePath() + "\n");
                } else {
                    output.append("[ERROR] Recovery gagal. Output:\n" + outputLog.toString() + "\n");
                }
            } catch (Exception ex) {
                output.append("[ERROR] Gagal recovery database: " + ex.getMessage() + "\n");
            }
        } else {
            output.append("[INFO] Recovery dibatalkan oleh user.\n");
        }
    }//GEN-LAST:event_btnRecoverActionPerformed

    private void btnBroadcastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBroadcastActionPerformed
        // Broadcast pesan ke semua warga (insert ke tabel notifikasi, id_warga = id_pengguna dari warga)
        String pesan = javax.swing.JOptionPane.showInputDialog(this, "Masukkan pesan broadcast:", "Broadcast Pesan", javax.swing.JOptionPane.PLAIN_MESSAGE);
        if (pesan != null && !pesan.trim().isEmpty()) {
            try {
                java.sql.Connection conn = database.Koneksi.getConnection();
                java.sql.Statement st = conn.createStatement();
                java.sql.ResultSet rs = st.executeQuery("SELECT id_pengguna FROM warga WHERE status='aktif'");
                int count = 0;
                while (rs.next()) {
                    int idPengguna = rs.getInt("id_pengguna");
                    java.sql.PreparedStatement ps = conn.prepareStatement("INSERT INTO notifikasi (id_warga, judul, pesan) VALUES (?, ?, ?)");
                    ps.setInt(1, idPengguna);
                    ps.setString(2, "Broadcast Admin");
                    ps.setString(3, pesan);
                    ps.executeUpdate();
                    ps.close();
                    count++;
                }
                database.Koneksi.commit();
                output.append("[BROADCAST] Pesan terkirim ke " + count + " warga aktif.\n");
            } catch (Exception ex) {
                database.Koneksi.rollback();
                output.append("[ERROR] Gagal broadcast: " + ex.getMessage() + "\n");
            }
        } else {
            output.append("[INFO] Broadcast dibatalkan atau pesan kosong.\n");
        }
    }//GEN-LAST:event_btnBroadcastActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // Konfirmasi reset data
        output.append("[RESET] Semua data berhasil direset.\n");
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Yakin ingin reset semua data? Tindakan ini tidak bisa dibatalkan!", "Konfirmasi Reset Data", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE);
        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
            try {
                java.sql.Connection conn = database.Koneksi.getConnection();
                java.sql.Statement st = conn.createStatement();
                st.executeUpdate("DELETE FROM notifikasi");
                st.executeUpdate("DELETE FROM log_aktivitas");
                st.executeUpdate("DELETE FROM saldo_tabungan");
                st.executeUpdate("DELETE FROM transaksi");
                st.executeUpdate("DELETE FROM warga");
                st.executeUpdate("DELETE FROM pengguna");
                st.executeUpdate("DELETE FROM lingkungan");
                database.Koneksi.commit();
                output.append("[RESET] Semua data berhasil direset.\n");
            } catch (Exception ex) {
                database.Koneksi.rollback();
                output.append("[ERROR] Gagal reset data: " + ex.getMessage() + "\n");
            }
        } else {
            output.append("[INFO] Reset data dibatalkan.\n");
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnExecuteSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteSQLActionPerformed
        output.setText("");
        String sql = inputSQL.getText().trim();
        if (sql.isEmpty()) {
            output.append("[INFO] Query kosong.\n");
            return;
        }
        try {
            java.sql.Connection conn = database.Koneksi.getConnection();
            java.sql.Statement st = conn.createStatement();
            boolean hasResultSet = st.execute(sql);
            if (hasResultSet) {
                java.sql.ResultSet rs = st.getResultSet();
                java.sql.ResultSetMetaData meta = rs.getMetaData();
                int colCount = meta.getColumnCount();
                // Print header
                for (int i = 1; i <= colCount; i++) {
                    output.append(meta.getColumnName(i) + "\t");
                }
                output.append("\n");
                // Print rows
                while (rs.next()) {
                    for (int i = 1; i <= colCount; i++) {
                        output.append(rs.getString(i) + "\t");
                    }
                    output.append("\n");
                }
                rs.close();
            } else {
                int updateCount = st.getUpdateCount();
                output.append("[SUCCESS] Query berhasil dieksekusi. Baris terpengaruh: " + updateCount + "\n");
            }
            st.close();
            database.Koneksi.commit();
        } catch (Exception ex) {
            database.Koneksi.rollback();
            output.append("[ERROR] " + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnExecuteSQLActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackup;
    private javax.swing.JButton btnBroadcast;
    private javax.swing.JButton btnExecuteSQL;
    private javax.swing.JButton btnRecover;
    private javax.swing.JButton btnReset;
    private javax.swing.JTextArea inputSQL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea output;
    // End of variables declaration//GEN-END:variables
}
